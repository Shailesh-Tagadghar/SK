// Practical 1 :  Implementation of Basic Document IR System Using Inverted Index in Python

from collections import defaultdict
import numpy as np


class InvertedIndex:
    def __init__(self, documents):
        """
        Initializes the inverted index with a given set of documents.
        :param documents: A dictionary where keys are document IDs and values are document text.
        """
        self.documents = documents
        self.index = defaultdict(set)  # Dictionary to store the inverted index
        self.build_index()

    def build_index(self):
        """Builds the inverted index from the provided documents."""
        for doc_id, text in self.documents.items():
            words = set(
                text.lower().split()
            )  # Convert text to lowercase and split into words
            for word in words:
                self.index[word].add(doc_id)  # Map the word to the document ID

    def search(self, query):
        """
        Searches for documents containing words in the query.
        :param query: A user query string containing potentially misspelled words.
        :return: A set of document IDs matching the corrected query words.
        """
        query_words = query.lower().split()  # Convert query to lowercase and split
        if not query_words:
            return set()
        
        

        result_sets = [
            self.index[word] for word in query_words if word in self.index
        ]

        if not result_sets:
            return set()  # If none of the words are found, return empty set

        return set.intersection(*result_sets)  # Find common documents for all words

    

# Sample documents
documents = {
    1: "Web content extraction involves retrieving structured data",
    2: "Search engines use document indexing for efficient retrieval",
    3: "Document retrieval is important in web mining applications",
    4: "Indexing helps in retrieving relevant documents based on query terms",
}

# Create the inverted index
index = InvertedIndex(documents)

# Example search queries with misspelled words
queries = ["retrievel", "documnt indexing", "web minng", "strctured data"]

for query in queries:
    result = index.search(query)
    print(
        f"Query: '{query}' â†’ Documents: {sorted(result) if result else 'No matching documents'}"
    )
