# Practical 5: Implement Convolutional Neural Network for Digit Recognition on the MNIST Dataset

#Import statements
import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

#Load the dataset
(X_train, y_train), (X_test, y_test) = keras.datasets.mnist.load_data()

#Normalise the pixel values to be between 0 and 1
X_train = X_train.astype('float32') / 255.0
X_test = X_test.astype('float32') / 255.0
X_train = np.expand_dims(X_train, axis=-1)
X_test = np.expand_dims(X_test, axis=-1)

#Define the CNN architecture
model = keras.models.Sequential([
    keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    keras.layers.MaxPooling2D((2, 2)),
    keras.layers.Conv2D(64, (3, 3), activation='relu'),
    keras.layers.MaxPooling2D((2, 2)),
    keras.layers.Flatten(),
    keras.layers.Dense(64, activation='relu'),
    keras.layers.Dense(10, activation='softmax')
])

#Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

#Train the model
history = model.fit(X_train, y_train, epochs=15, batch_size=128, validation_data=(X_test, y_test))

#Evaluate the model on the test data
test_loss, test_acc = model.evaluate(X_test, y_test)
print('Test accuracy:', test_acc)

#Show prediction for a sample input image
sample_image = X_test[0]
sample_label = y_test[0]
sample_image = np.expand_dims(sample_image, 0)
pred = model.predict(sample_image)
pred_label = np.argmax(pred)
print('Predicted label:', pred_label)
print('True label:', sample_label)

#Display the sample image
plt.imshow(sample_image.squeeze(), cmap='gray')
plt.show()
